// <auto-generated />
using System;
using DisasterApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DisasterApp.Infrastructure.Migrations
{
    [DbContext(typeof(DisasterContext))]
    [Migration("20250625121539_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.AssistanceProvided", b =>
                {
                    b.Property<Guid>("AssistanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("assistance_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("ProvidedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("provided_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("provider_id");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("request_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.HasKey("AssistanceId")
                        .HasName("PK__Assistan__13BD40CA36EA92BA");

                    b.HasIndex("ProviderId");

                    b.HasIndex(new[] { "RequestId" }, "IX_AssistanceProvided_Request");

                    b.ToTable("AssistanceProvided", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.Chat", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("chat_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("receiver_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.HasKey("ChatId")
                        .HasName("PK__Chat__FD040B17E1346961");

                    b.HasIndex("SenderId");

                    b.HasIndex(new[] { "ReceiverId", "IsRead" }, "IX_Chat_ReceiverUnread");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.DisasterReport", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("report_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<Guid>("DisasterTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("disaster_type_id");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("severity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("verified_at");

                    b.Property<Guid?>("VerifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("verified_by");

                    b.HasKey("ReportId")
                        .HasName("PK__Disaster__779B7C58C8BC03EE");

                    b.HasIndex("DisasterTypeId");

                    b.HasIndex("VerifiedBy");

                    b.HasIndex(new[] { "UserId" }, "IX_DisasterReport_User");

                    b.ToTable("DisasterReport", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.DisasterType", b =>
                {
                    b.Property<Guid>("DisasterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("disaster_type_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DisasterTypeId")
                        .HasName("PK__Disaster__731C64A80F5A5268");

                    b.HasIndex(new[] { "Name" }, "UQ__Disaster__72E12F1B58BC6E7D")
                        .IsUnique();

                    b.ToTable("DisasterType", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.ImpactDetail", b =>
                {
                    b.Property<Guid>("ImpactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("impact_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImpactType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("impact_type");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("report_id");

                    b.HasKey("ImpactId")
                        .HasName("PK__ImpactDe__BBC672B339BEF2C0");

                    b.HasIndex("ReportId");

                    b.ToTable("ImpactDetail", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("location_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("GooglePlaceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("google_place_id");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(10, 8)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(11, 8)")
                        .HasColumnName("longitude");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("report_id");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__771831EA31F9FED4");

                    b.HasIndex(new[] { "ReportId" }, "UQ__Location__779B7C5926D8CAE2")
                        .IsUnique();

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("notification_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("RelatedEntity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("related_entity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842F4A100656");

                    b.HasIndex(new[] { "UserId" }, "IX_Notification_User");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.Photo", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("photo_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("report_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("uploaded_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("url");

                    b.HasKey("PhotoId")
                        .HasName("PK__Photo__CB48C83D9C040954");

                    b.HasIndex("ReportId");

                    b.ToTable("Photo", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.RefreshToken", b =>
                {
                    b.Property<Guid>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("refresh_token_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expired_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("RefreshTokenId")
                        .HasName("PK__RefreshT__B0A1F7C71F7A268A");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Token" }, "UQ__RefreshT__CA90DA7A24B1CB16")
                        .IsUnique();

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__760965CCCEA47220");

                    b.HasIndex(new[] { "Name" }, "UQ__Role__72E12F1B6DD5B5D7")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.SupportRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("request_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("QuantityNeeded")
                        .HasColumnType("int")
                        .HasColumnName("quantity_needed");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("report_id");

                    b.Property<string>("SupportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("support_type");

                    b.Property<string>("Urgency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("urgency");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("RequestId")
                        .HasName("PK__SupportR__18D3B90F6E2CEB46");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ReportId" }, "IX_SupportRequest_Report");

                    b.ToTable("SupportRequest", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AuthId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("auth_id");

                    b.Property<string>("AuthProvider")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("auth_provider");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsBlacklisted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_blacklisted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("photo_url");

                    b.HasKey("UserId")
                        .HasName("PK__User__B9BE370FF42BE9EA");

                    b.HasIndex(new[] { "AuthProvider", "AuthId" }, "UQ_User_AuthProviderId")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E61647E5028D0")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_UserRole");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.AssistanceProvided", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.User", "Provider")
                        .WithMany("AssistanceProvideds")
                        .HasForeignKey("ProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_AssistanceProvided_Provider");

                    b.HasOne("DisasterApp.Infrastructure.Data.SupportRequest", "Request")
                        .WithMany("AssistanceProvideds")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_AssistanceProvided_Request");

                    b.Navigation("Provider");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.Chat", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.User", "Receiver")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_Chat_Receiver");

                    b.HasOne("DisasterApp.Infrastructure.Data.User", "Sender")
                        .WithMany("ChatSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Chat_Sender");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.DisasterReport", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.DisasterType", "DisasterType")
                        .WithMany("DisasterReports")
                        .HasForeignKey("DisasterTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_DisasterReport_DisasterType");

                    b.HasOne("DisasterApp.Infrastructure.Data.User", "User")
                        .WithMany("DisasterReportUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_DisasterReport_User");

                    b.HasOne("DisasterApp.Infrastructure.Data.User", "VerifiedByNavigation")
                        .WithMany("DisasterReportVerifiedByNavigations")
                        .HasForeignKey("VerifiedBy")
                        .HasConstraintName("FK_DisasterReport_VerifiedBy");

                    b.Navigation("DisasterType");

                    b.Navigation("User");

                    b.Navigation("VerifiedByNavigation");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.ImpactDetail", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.DisasterReport", "Report")
                        .WithMany("ImpactDetails")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FK_ImpactDetail_Report");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.Location", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.DisasterReport", "Report")
                        .WithOne("Location")
                        .HasForeignKey("DisasterApp.Infrastructure.Data.Location", "ReportId")
                        .IsRequired()
                        .HasConstraintName("FK_Location_Report");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.Notification", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.Photo", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.DisasterReport", "Report")
                        .WithMany("Photos")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FK_Photo_Report");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.RefreshToken", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RefreshToken_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.SupportRequest", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.DisasterReport", "Report")
                        .WithMany("SupportRequests")
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FK_SupportRequest_Report");

                    b.HasOne("DisasterApp.Infrastructure.Data.User", "Requester")
                        .WithMany("SupportRequests")
                        .HasForeignKey("RequesterId")
                        .IsRequired()
                        .HasConstraintName("FK_SupportRequest_Requester");

                    b.Navigation("Report");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("DisasterApp.Infrastructure.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("DisasterApp.Infrastructure.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.DisasterReport", b =>
                {
                    b.Navigation("ImpactDetails");

                    b.Navigation("Location");

                    b.Navigation("Photos");

                    b.Navigation("SupportRequests");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.DisasterType", b =>
                {
                    b.Navigation("DisasterReports");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.SupportRequest", b =>
                {
                    b.Navigation("AssistanceProvideds");
                });

            modelBuilder.Entity("DisasterApp.Infrastructure.Data.User", b =>
                {
                    b.Navigation("AssistanceProvideds");

                    b.Navigation("ChatReceivers");

                    b.Navigation("ChatSenders");

                    b.Navigation("DisasterReportUsers");

                    b.Navigation("DisasterReportVerifiedByNavigations");

                    b.Navigation("Notifications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SupportRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
